#! /usr/bin/env zsh
alias :q="exit 0"
alias :Q=":q"
alias lg="lsgrep"
alias gping="gping --clear --color red,green,blue,yellow --vertical-margin 0 "$@""
alias please="sudo"
alias pls="please"
alias vim="nvim"
alias fd="fdfind"
alias fetch="cd . #triggering auto-fetch"

function git() {
	if [ "$#" -eq 0 ]; then
		git -c color.status=always status -sb |
		sed "1s/^##/$(printf '\033[32mS\033[31mU\033[0m')/" &&
		printf "\nM = modified\n? = unversioned\nA = added\nD = deleted\nR = renamed\n"

	else
		command git "$@"
	fi
}

function cd() { # Autofetch
	builtin cd "$@" || return
	if [ -d ".git" ]; then
		local COLOR='\033[35m' #purple
		echo "$COLOR\033[1m[auto-fetch]\033[0m Git repo detected. Starting fetch..."

		git fetch --quiet &! # &! disowns the process so it even gets finished, if you close the shell.
		local FETCH_PID=$!

		echo "$COLOR\033[1m[auto-fetch]\033[0m Fetch running."
		echo "$COLOR\033[1m[auto-fetch]\033[0m Press \033[36 m\033[1m'ENTER'\033[0m to \033[31mcancel...\033[0m"

		zmodload zsh/zselect 2>/dev/null

		while kill -0 "$FETCH_PID" 2>/dev/null; do
			if zselect -t 100 -r 0; then
				read -rs -k 1 key
				read -t 0.01 -rs -k 3 discard 2>/dev/null
				local COLOR='\033[31m' #red
				echo -e "\n$COLOR\033[1m[auto-fetch]\033[0m Fetch will be$COLOR cancelled...\033[0m"
				kill "$FETCH_PID" 2>/dev/null
				wait "$FETCH_PID" 2>/dev/null
				echo "$COLOR\033[1m[auto-fetch]\033[0m Fetch$COLOR cancelled.\033[0m"
				return
			fi
		done
		local COLOR='\033[32m' #green
		wait "$FETCH_PID" 2>/dev/null
		echo "$COLOR\033[1m[auto-fetch]\033[0m Fetch$COLOR completed.\033[0m"
        local NUMBACK=$(git status -b --porcelain=v1 | grep -Eo "behind [0-9]+" | grep -Eo "[0-9]+")
        local NUMHEAD=$(git status -b --porcelain=v1 | grep -Eo "ahead [0-9]+"  | grep -Eo "[0-9]+")
        if [[ -n "$NUMBACK" ]]; then
            echo "$COLOR\033[1m[auto-fetch]\033[0m You are \033[31m\033[1m$NUMBACK commits\033[0m\033[31m behind!\033[0m"
        fi
        if [[ -n "$NUMHEAD" ]]; then
            echo "$COLOR\033[1m[auto-fetch]\033[0m You are \033[32m\033[1m$NUMHEAD commits\033[0m\033[32m ahead!\033[0m"
        fi
	fi
}

function gp() {
	# Check if at least one address is provided
	if [[ $# -lt 1 ]]; then
		read -p "IPS to Ping (separated by space): " gpingips
	fi

	read -p "Total duration (seconds): " duration
	read -p "Ping interval (seconds): " interval

	# Check if inputs are numbers
	if [[ ! $duration =~ ^[0-9]+$ ]]; then
		duration="30"
	fi

	if [[ ! $interval =~ ^[0-9]+$ ]]; then
		interval="0.2";
	fi

	if [[ $# -lt 1 ]]; then
		eval set -- $gpingips
	fi

	gping --buffer ${duration} --watch-interval ${interval} "$@"
	unset duration interval gpingips
}

# Redefinition of fzf-cd-widget to use autofetch.
function fzf-cd-widget () {
	setopt localoptions pipefail no_aliases 2> /dev/null
	local dir="$(
    FZF_DEFAULT_COMMAND=${FZF_ALT_C_COMMAND:-} \
    FZF_DEFAULT_OPTS=$(__fzf_defaults "--reverse --walker=dir,follow,hidden --scheme=path" "${FZF_ALT_C_OPTS-} +m") \
    FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd) < /dev/tty)" 
	if [[ -z "$dir" ]]
	then
		zle redisplay
		return 0
	fi
	zle push-line
	BUFFER="cd -- ${(q)dir:a}" 
	zle accept-line
	local ret=$? 
	unset dir
	zle reset-prompt
	return $ret
}

# Redefinition of fzf-history-widget to display the last time the command was used.
function fzf-history-widget () {
	local selected
	setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases noglob nobash_rematch 2> /dev/null
	if zmodload -F zsh/parameter p:history 2> /dev/null && (( ${#commands[perl]} ))
	then
		selected="$(printf '%s\t%s\000' "${(kv)history[@]}" |
      perl -0 -ne 'if (!$seen{(/^\s*[0-9]+\**\t(.*)/s, $1)}++) { s/\n/\n\t/g; print; }' |
      FZF_DEFAULT_OPTS=$(__fzf_defaults "" "-n2..,.. --scheme=history --bind=ctrl-r:toggle-sort --wrap-sign '\t↳ ' --highlight-line ${FZF_CTRL_R_OPTS-} --query=${(qqq)LBUFFER} +m --read0") \
      FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd))" 
	else
		selected="$(fc -rl 1 | awk '{ cmd=$0; sub(/^[ \t]*[0-9]+\**[ \t]+/, "", cmd); if (!seen[cmd]++) print $0 }' |
      FZF_DEFAULT_OPTS=$(__fzf_defaults "" "-n2..,.. --scheme=history --bind=ctrl-r:toggle-sort --wrap-sign '\t↳ ' --highlight-line ${FZF_CTRL_R_OPTS-} --query=${(qqq)LBUFFER} +m") \
      FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd))" 
	fi
	local ret=$? 
	if [ -n "$selected" ]
	then
		if [[ $(awk '{print $1; exit}' <<< "$selected") =~ ^[1-9][0-9]* ]]
		then
			zle vi-fetch-history -n $MATCH
		else
			LBUFFER="$selected" 
		fi
	fi
	zle reset-prompt
	return $ret
}

